Readme File For Homework1 (hexdump,base 64 encoding and decoding)

Consists of 4 seperate programs , each functionality capable of standing alone. 
hex.cpp is for the hexdump, hex.o corresponding object file
enc.cpp is for the encoding, enc.o corresponding object file
dec.cpp is for the decoding, dec.o corresponding object file
mainp.cpp is the program that calls the necessary function, mainp.o corresponding object file

A makefile "makefile" is created and used as :
gmake

hw1 is the final object file.
hw1 (hexdump/enc-base64/dec-base64) arguments
arguments could be files 
in case enter is hit after the choice , then the stdin is invoked and the user will have to enter input and then hit enter again.

gmake clean - will remove all object files created.
error messages are prompted when apt. 

Compile with:
		make
	- Display hex dump of input:
		hw1 hexdump [file]
	- Encode input to Base64
	  hw1 enc-base64 [file]
	- Decode input from Base64
		hw1 dec-base64 [file]
	- Clean binary files with:
		make clean

Design
	- Hexdump
		- Print out the current byte count as a 6-digit hex value
		- Read each byte one by one and print it out as a hex value, putting 
			spaces where needed
		- After 16 bytes, print out the 16 hex values stored as characters
		- Repeat until end of file
	- Base64 Encoding
		- Read 3 ASCII bytes at a time
		- Do bit-wise operations to drop from 8 bits/char -> 6 bits/char
		- Do lookup to see what Base64 matches the 6 bit value that just got 
			made
		- Concat each new Base64 char to output
		* If not enough bytes read, concat '=' to end
	- Base64 Decoding
		- Read 4 chars from input
		- If between A-Z, subtract 'A'; if between a-z, subtract ('a'-26); 
			if '+' -> 62; if '/' -> 63
		- Now have 4 bytes of values 0-63. Do bit operations to convert 
			to 3 8-bit values
		- Print them out
		* If you get '\n' in buffer, skip it
		* If you get '=' in buffer, end.
		* If value not in ranges listed above, print to stderr that the input 
			file does not contain valid Base64 characters, end program
